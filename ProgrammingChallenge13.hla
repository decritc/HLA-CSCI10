/*
 * COMPLETE THE PROGRAM DOCUMENTATION HERE
 *
 */
program ProgrammingChallengeThirteen;

#include ("stdlib.hhf")

/* forward declarations */
procedure getInt8 (prompt: string; min: int8; max: int8); @returns("al"); @forward;

/* procedure definitions */
procedure getInt8 (prompt: string; min: int8; max: int8);
begin getInt8;

	push(edx);
	push(ecx);
	push(ebx);
	forever
		try
			stdout.put(nl, prompt, " (", min, " to ", max, "): ");
			stdin.flushInput();
			stdin.geti8();
			unprotected
				cmp((type int8 al), min);
				jl INT8_BAD;
				cmp((type int8 al), max);
				jg INT8_BAD;
				break;
				INT8_BAD:
					stdout.put(nl, "Value not in required range.");
		anyexception
			stdout.put(nl, "Invalid input.");
		endtry;
	endfor;
	pop(ebx);
	pop(ecx);
	pop(edx);

end getInt8;

/* program variables and main */

static
	input: int8;
	isPrime: boolean;

begin ProgrammingChallengeThirteen;

	forever

		console.cls();

		mov(getInt8("Please enter an int8", -127, 127), input);

		stdout.put(nl, "What do you want to do with your input value?", nl);
		stdout.put("1. Test to see if it is negative", nl);
		stdout.put("2. Test to see if it is even", nl);
		stdout.put("3. Reverse its sign", nl);
		stdout.put("4. Test to see if it is prime", nl);
		stdout.put("your choice: ");
		getInt8("your choice", 1, 4);

		console.cls();

		mov(1, bl);
		cmp(bl, al);
		jnz CHECK_2;
			mov(input, bh);
			mov(0, bl);
			cmp(bl, bh);
			js ValueIsPositive;
			stdout.put(input, " is a negative value.", nl);
			jmp END_CHECKS;
			ValueIsPositive:
			stdout.put(input, " is greater than or equal to zero.", nl);
			jmp END_CHECKS;
		CHECK_2:
		mov(2, bl);
		cmp(bl, al);
		jnz CHECK_3;
			mov(0, ah);
			mov(input, al);
			idiv(2, ax);
			mov(0, bl);
			cmp(bl, ah);
			jnz ELSE_1;
				stdout.put(input, " is an even number.", nl);
				jmp END_CHECKS;
			ELSE_1:
				stdout.put(input, " is an odd number.", nl);
				jmp END_CHECKS;
		CHECK_3:
		mov(3, bl);
		cmp(bl, al);
		jnz FINAL_ELSE;
			mov(input, al);
			not(al);
			add(1, al);
			stdout.put(input, " sign reversed is ", (type int8 al), nl);
			jmp END_CHECKS;
		FINAL_ELSE:
			mov(input, bh);
			mov(0, bl);
			cmp(bl, bh);
			js SECOND_IF;
				stdout.put("Reversing the sign.", nl, nl);
				mov(input, al);
				not(al);
				add(1, al);
				mov(al, input);
			SECOND_IF:
			mov(true, isPrime);
			mov(input, bh);
			mov(2, bl);
			cmp(bl, bh);
			js ELSE_2;
			je ELSE_2;
				mov(false, isPrime);
				jmp LAST_IF;
			ELSE_2:
				for (mov(2, cl); cl<input; inc(cl)) do
					mov(0, ah);
					mov(input, al);
					div(cl, ax);
					mov(0, bl);
					cmp(bl, ah);
					jne CONTINUE_LOOP;
						mov(false, isPrime);
						break;
					CONTINUE_LOOP:
				endfor;
			LAST_IF:
			mov(isPrime, bh);
			mov(true, bl);
			cmp(bl, bh);
			jne IS_FALSE;
				stdout.put(input, " is a prime number.", nl);
				jmp END_CHECKS;
			IS_FALSE:
				stdout.put(input, " is not a prime number.", nl);
		END_CHECKS:

		stdout.put(nl, nl, "Go again (y/n)? ");
		stdin.flushInput();

		chars.toUpper(stdin.getc()); // NEED CODE TO FORCE UPPER-CASE

		cmp(al, 'N');
		jne GO_AGAIN;
			break;
		GO_AGAIN:
			console.cls();

	endfor;


end ProgrammingChallengeThirteen;
