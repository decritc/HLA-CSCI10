/*
 * Programming Challenge #9
 *
 * written by			Derek Critchfield
 * created on			23 October 2017
 * last modified on		25 October 2017
 *
 * This program takes user inputs and performs bitwise operations on them.
 *
 */
program ProgrammingChallenge9;

// includes
#include ("stdlib.hhf");

// static declarations

// procedure forward declarations
procedure getUns8(prompt:string; min:uns8; max:uns8); @forward;
procedure getInt8(prompt:string; min:int8; max:int8); @forward;
procedure showBits(value:byte); @forward;

// procedure definitions
procedure getUns8(prompt:string; min:uns8; max:uns8);
begin getUns8;
  push(ebx);
  forever;
    try
      stdout.put(nl, prompt);
      stdin.flushInput();
      stdin.getu8();
      unprotected
      if (al >= min && al <= max) then
        break;
      else
        stdout.put("Enter a value between ", min, " and ", max, ".", nl);
      endif;
    anyexception
      stdout.put("Try again.", nl);
    endtry;
  endfor;
  pop(ebx);
end getUns8;

procedure getInt8(prompt:string; min:int8; max:int8);
begin getInt8;
  push(ebx);
  forever;
    try
      stdout.put(nl, prompt);
      stdin.flushInput();
      stdin.geti8();
      unprotected
      if (al >= min && al <= max) then
        break;
      else
        stdout.put("Enter a value between ", min, " and ", max, ".", nl);
      endif;
    anyexception
      stdout.put("Try again.", nl);
    endtry;
  endfor;
  pop(ebx);
end getInt8;

procedure showBits(value:byte);
begin showBits;
  push(eax);
  push(ecx);
  stdout.put("%");
  mov(value, al);
  for (mov(0, cl); cl<4; inc(cl)) do
    shl(1, al);
    if (@c) then
      stdout.put("1");
    else
      stdout.put("0");
    endif;
  endfor;
  stdout.put("_");
  for (mov(0, cl); cl<4; inc(cl)) do
    shl(1, al);
    if (@c) then
      stdout.put("1");
    else
      stdout.put("0");
    endif;
  endfor;
  stdout.newln();
  pop(ecx);
  pop(eax);
end showBits;

begin ProgrammingChallenge9;

// program instructions
console.cls();
stdout.put(nl, "PART ONE: not", nl);
getUns8("Please enter a number between [0 - 255]: ", 0, 255);
stdout.putsSize("input [decimal]: ", -35, ' ');
stdout.put((type uns8 al), nl);
stdout.putsSize("input [binary]: ", -35, ' ');
showBits(al);
not(al);
stdout.putsSize("bitwise complement [decimal]: ", -35, ' ');
stdout.put((type uns8 al), nl);
stdout.putsSize("bitwise complement [binary]: ", -35, ' ');
showBits(al);

stdout.put("Press ENTER to continue");
stdin.readLn();
console.cls();

stdout.put(nl, "PART TWO: and/or", nl);
getInt8("Please enter a number between [-128 - 127]: ", -128, 127);
stdout.putsSize("input [decimal]: ", -35, ' ');
stdout.put((type int8 al), nl);
stdout.putsSize("input [binary]: ", -35, ' ');
showBits(al);
stdout.putsSize("bits that are set: ", -35, ' ');
mov(1, bl);
for(mov(0, cl); cl <= 8; inc(cl)) do
  push(eax);
  and(bl, al);
  if(al != 0) then
    stdout.put((type int8 cl), " ");
  endif;
  pop(eax);
  shl(1,bl);
endfor;
stdout.newln();

or(%1111_1111, al);
stdout.putsSize("all bits are now set [binary]: ", -35, ' ');
showBits(al);

stdout.put("Press ENTER to continue");
stdin.readLn();
console.cls();

stdout.put(nl, "PART THREE: and", nl);
getUns8("Please enter a number between [0 - 255]: ", 0, 255);
stdout.putsSize("input [decimal]: ", -35, ' ');
stdout.put((type uns8 al), nl);
stdout.putsSize("input [binary]: ", -35, ' ');
showBits(al);
push(eax);
and(%1111_0000, al);
stdout.putsSize("lower nibble cleared [binary]: ", -35, ' ');
showBits(al);
pop(eax);
push(eax);
and(%0000_1111, al);
stdout.putsSize("upper nibble cleared [binary]: ", -35, ' ');
showBits(al);
pop(eax);
stdout.put("Press ENTER to continue");
stdin.readLn();
console.cls();

stdout.put(nl, "PART FOUR: xor", nl);
getInt8("Please enter a number between [-128 - 127]: ", -128, 127);
stdout.putsSize("input [decimal]: ", -35, ' ');
stdout.put((type int8 al), nl);
stdout.putsSize("input [binary]: ", -35, ' ');
showBits(al);
push(eax);
xor(%1111_1111, al);
stdout.putsSize("bitwise complement [binary]: ", -35, ' ');
showBits(al);
pop(eax);
push(eax);
xor(al, al);
stdout.putsSize("zeroed out [binary]: ", -35, ' ');
showBits(al);
pop(eax);

end ProgrammingChallenge9;
